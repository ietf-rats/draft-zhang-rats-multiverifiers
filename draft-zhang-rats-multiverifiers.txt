



COSE                                                            J. Zhang
Internet-Draft                                                 H. Labiod
Intended status: Standards Track     Huawei Technologies France S.A.S.U.
Expires: 20 April 2025                                             T. Li
              Shield Lab, Singapore Research Center, Huawei Technologies
                                                           T. Giannetsos
                                                            UBITECH Ltd.
                                                             H. Birkholz
                                                          Fraunhofer SIT
                                                         17 October 2024


          Handling Multiple Verifiers in the RATS Architecture
                 draft-zhang-rats-multiverifiers-latest

Abstract

   In the IETF Remote Attestation Procedures (RATS) architecture, a
   Verifier accepts Evidence and generates Attestation Results needed by
   Relying Parties.  This document provides a solution to inconsistent
   behaviors of the Verifier in the RATS architecture by introducing a
   mechanism to aggregate Attestation Results collected from multiple
   Verifiers at the Relying Party while simplifying its policy and
   operation.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Source for this draft and an issue tracker can be found at
   https://github.com/ietf-rats/draft-zhang-rats-multiverifiers.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 20 April 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Passport Model Cases
     1.2.  Background-check Model
   2.  Terminology
   3.  Handing Multiple Verifiers
     3.1.  Aggregation of Attestation Results from Multiple Verifiers
     3.2.  Verifier Manager
   4.  Use cases
   5.  Security Consideration
   6.  IANA Considerations
   7.  References
     7.1.  Informative References
   8.  Three
     8.1.   Use Cases
     8.2.  Requirements Notation
   9.  Modes of Use
     9.1.  Timestamp then COSE (TTC)
     9.2.  COSE then Timestamp (CTT)
   10. RFC 3161 Time-Stamp Tokens COSE Header Parameters
     10.1.  3161-ttc
     10.2.  3161-ctt
   11. Timestamp Processing
   12. Security Considerations
   13. IANA Considerations
   14. References
     14.1.  Normative References
     14.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The Remote Attestation procedures (RATS) Architecture illustrates an
   overview of the roles and data-flows between them in Section 3 of
   [RFC9334].  Section 5 of [RFC9334] refines the data-flow diagram by
   describing two reference models: Passport Model and Background- check
   Model.  As discussed in that document, a Verifier accepts Evidence
   from Attesters, appraises it using Appraisal Policy, and generates
   Attestation Results needed by Relying Parties.

   As a single Verifier can introduce a single point of failure, either
   as the target of a denial of service attack, due to compromization,
   service congestion, or broken Internet connectivity to the Verifier,
   relying on a single trusted entity can introduce significant risk.

   The architectural pattern of using multiple Verifiers are one
   approach to counter such risks.  Nevertheless, it is not guaranteed
   that different Verifiers generate the same Attestation Results.  Some
   exemplary reasons include: a) RATS conceptual messages, such as
   Reference Values, Endorsements, Appraisal Policy for Evidence for
   different Verifiers, are not necessarily aligned, b) certain
   Verifiers can be compromised, or c) some Verifiers follow different
   Appraisal Policy for Evidence.  This lack of alignment can result in
   significant issues in both Passport Model and Background-check Model,
   which is detailed as follows.  The Solution to address the problem of
   the lack of alignment is detailed in Section 8.

1.1.  Passport Model Cases

   Under the Passport Model, an Attester sends Evidence to a Verifier.
   The Verifier generates the Attestation Results and sends these back
   to the Attester.  The Attester conveys the Attestation Results to the
   Relying Party to proof its trustworthiness.  Fig. 1 and 2 show
   scenarios that multiple heterogeneous Verifiers can introduce issues
   in a Passport Model based system.

   In Fig. 1, if Verifier A is not trusted by the Relying Party,
   Attestation Results sent by the Attester can always be rejected by
   the Relying Party, which means that the Attester may end up in a loop
   of producing and conveying Attestation Evidence and wait for
   Attestation Results in vain, repeatedly.

   In Fig. 2, Verifier A generates positive Attestation Results for an
   Attester, while Verifier B generates negative Attestation Results for
   the same Attester.  To trick a Relying Party into putting unjustified
   trust in the Attester, an Attester can act maliciously by selectively
   forwarding only Attestation Results from Verifier A and not Verifier
   B.  Such malicious behavior would render a trustworthiness assessment
   of Attesters by the Relying Party biased or unreliable.

        .-------------.
        |             | Compare Evidence
        |  Verifier A | against appraisal policy
        |             |
        '--------+----'
            ^    |
   Evidence |    | Attestation
            |    | Result
            |    v
        .---+--------.              .-------------. Compare
        |            +------------>X|             | Attestation
        |  Attester  | Attestation  |   Relying   | Result against
        |            | Result       |    Party    | appraisal
        '------------'              '-------------' policy

   Figure 1: Passport Model with Verifier A not trusted by Relying
   Party.

        .-------------.
        |             | Compare Evidence
        |  Verifier A | against appraisal policy
        |             |
        '--------+----'
            ^    |
   Evidence |    | Attestation
            |    | Result A (positive)
            |    v
        .---+--------.              .-------------. Compare
        |            +------------->|             | Attestation
        |  Attester  | Attestation  |   Relying   | Result against
        |            | Result A     |    Party    | appraisal
        '---+--------'              '-------------' policy
            |    ^
   Evidence |    | Attestation
            |    | Result B (negative)
            |    |
            V    |
        .--------+----.
        |             | Compare Evidence
        |  Verifier B | against appraisal policy
        |             |
        '-------------'

   Figure 2: Passport Model with cheating Attester

1.2.  Background-check Model

   Under the Background-check Model, an Attester sends Evidence to a
   Verifier via a Relaying Party, and the Verifier generates the
   Attestation Results and sends them back to the Relying Party.

   Fig. 3 and 4 show scenarios where multiple heterogeneous Verifiers
   introduce potential issues in a Background-check Model.

   In Fig. 3, even if a Verifier is trusted by a Relying Party, there is
   no assurance that it is working as intended and only does what it is
   supposed to do and nothing else.  If multiple Verifiers exist,
   neither Evidence might reach all Verifiers nor all Attestation
   Results might reach the Relying Party due to failing conveyance
   mechanisms, or due to the Verifier itself being compromised or
   malfunctioning., or hardware problems.

   In Fig. 4, a Relying Party is able to alternate between Verifiers.
   When these Verifiers are heterogeneous though, a Relying Party might
   receive different or conflicting Attestation Results from them, which
   means the trustworthy assessment of the Attester can rely (and fail)
   on a specific selection of Verifiers made by at the Relying Party
   side.

                                   .-------------.
                                   |             | Compare Evidence
                                   |   Verifier  | against
                                   |             | appraisal
                                   |      x(2)   | policy
                                   '--------+----'
                                        ^   x(3)
                               Evidence |   | Attestation
                                        x(1)| Result
                                        |   v
      .------------.               .----|--------.
      |            +-------------->|---'         | Compare
      |            |               |             | Attestation
      |  Attester  |   Evidence    |     Relying | Result against
      |            |               |      Party  | appraisal policy
      '------------'               '-------------'

   Figure 3: A Background-Check Model where a Verifier is not available
   because of 1) a Relying Party not being reachable by the Verifier, 2)
   a malfunction of the Verifier.

                                   .-------------.
                                   |             | Compare Evidence
                                   |   Verifier  | against
                                   |      A      | appraisal
                                   '--------+----' policy
                                        ^   |
                               Evidence |   | Attestation
                                        |   | Result (positive)
                                        |   v
      .------------.               .----|--------. Compare
      |            +-------------->|---'         | Attestation
      |  Attester  |   Evidence    |     Relying | Result against
      |            |               |      Party  | appraisal policy
      '------------'               '----+--------'
                                        |   ^
                               Evidence |   | Attestation
                                        |   | Result (negative)
                                        v   |
                                   .--------+----.
                                   |             | Compare Evidence
                                   |   Verifier  | against
                                   |      B      | appraisal
                                   '-------------' policy

   Figure 4: A Background-Check Model conveying conflicting Attestation
   Results originating from multiple Verifiers.

2.  Terminology

   The following terms are imported from [RFC9334]: Attester, Evidence,
   Endorsement, Reference value, Appraisal Policy, Relying Party, and
   Verifier.  Also imported are the time definitions time(VG), time(NS),
   time(EG), time(ER), time(RG),time(RX), and time(OP) from that
   document's Appendix A.

   New relevant Events over Time: time(AG): the time at the event that
   the Attestation Results for the same attester is aggregated.

3.  Handing Multiple Verifiers

   In this section, we follow the attestation data-flow based on the
   Background-Check Model, to support robust aggregation of the
   Attestation Results in an environment with heterogeneous verifiers.

3.1.  Aggregation of Attestation Results from Multiple Verifiers

   Fig. 5 below is a sequence diagram which updates Fig. 14 in [RFC9334]
   to support the aggregation of Attestation Results from multiple
   Verifiers in a Background-check Model.  The nonce is generated by the
   Relying Party, in place of each Verifier, so as to reduce the amount
   of Evidence generated.  The aggregation method implemented by the
   Relying Party is out of scope of this draft.  For example, the
   majority vote could be viewed as a possible solution. .---------.
   .--------. .--------.  .--------.  .---.  |
   Attester| |Verifier| |Verifier| |Verifier| | RP| | | | 1 | | 2 | |
   k | | | '---------' '--------' '--------' '--------' '---' | | | | |
   Time(VG_a) ~ ~ ~ ~ | | | | | |<----Nonce
   ---------------------------------------time(NS_r) Time(EG_a) | | | | 
   | | | | | |-----Evidence{Nonce}------------------------------------
   >| | |
   time(ER_r_1) | |<-----Evidence{Nonce}---------------------| | | | |
   time(ER_r_2) | time(RG_v_1) |<-Evidence{Nonce}---------------| | |
   time(RG_v_2) | time(ER_r_k) | | | |<-Evidence{Nonce}--| | | |
   time(RG_v_k) | | |--Attestation Result--------------------->| | |
   {time(RX_v_1)-time(RG_v_1)} | | | |----Attestation
   Result--------->| | | | {time(RX_v_2)-
   time(RG_v_2)} | | | | |--------AR------->| | | | {time(RX_v_k)-
   time(RG_v_k)} | | | | | time(AG_r) | | | | time(OP_r) Figure 5:
   Background-Check Model with the support of the aggregation of
   Attestation Results from multiple Verifiers.

3.2.  Verifier Manager

   Manually configuring the Verifiers in each Relying Party is not well
   adapted to the changing of the network environment.  As there is no
   guarantee of the availability and consolidation of these Verifiers in
   the long term.  We introduce a new entity in RATS architecture, which
   is the Verifier manager, to address these issues.  As shown in Fig.
   6, after configuring the anchor seed Verifiers in the Relying Party,
   which is typically a small set of trusted Verifiers by the Relying
   Party.  The Relying Party can communicate with the Verifier manager
   with this list of Verifiers, in together with certain parameters n,
   for example, the number of Verifiers that it expects to collect
   Attestation Results from.  The Verifier manager matches this list
   with its local database of the groups of Verifiers, find the groups
   of Vherifiers that behave most close to the majority of the Verifiers
   in this list, and picks n Verifiers out of it.  Then the Verifier
   manager sends these n Verifiers back to the Relying Party, as its
   recommended Verifiers.  In such a way, each Relying Party can
   flexibly configure its policy for the trusted Verifier. .---------.
   .---------.  .--------.  .-------------.  | Endorser| | Reference | |
   Verifier | | Relying Party| '+--------' | Value | | Owner | |
   Owner | | | Provider | '----+-----' '-----+--------' |
   '-------+---' | | | | | | | Endorsements | Reference | Appraisal |
   Appraisal | | Values | Policy for | Policy for | | | Evidence |
   Attestation '-----------.  | | | Results | | | | v v v |
   .-------------------------.  | .------>| Verifier +------.  | |
   '-------------------------' | | | | | | Evidence Attestation | | |
   Results | | | | | | v v .-----+----.  .---------------. |
   Attester | | Relying Party | '----------' '---------------' | ^
   Anchor seed Verifiers, | | Recommended parameter | | Verifiers | |
   .------------------.  | Verifier Manager | '------------------'
   Figure 6: Revised Data Flow based RFC9334

4.  Use cases

   This Section illustrates some use cases that can benefit from an
   architecture that takes multiple Verifiers into account.

   Use case 1: Intent-driven Attestation Classification for Data Center
   Network Solutions Need: Establishment of trust in a complex data
   center environment comprising multiple VMs instantiated on
   heterogeneous CPU architectures Solution: Attestation Verification
   Service based on a harmonized set of components to be leveraged by
   multiple Verifiers Source: TCG Trusted Application Protocol (TAP) Use
   Cases [TAP]

   Use case 2: Enhancing TEE Device Interface Security Protocol (TDISP)
   Need: Enhance Trusted Execution Environment Provisioning (TEEP)
   Architecture with TEE-I/O capabilities for the direct verification
   assignment of specific system characteristics to targeted (remote)
   Verifiers Solution: Harmonized Trusted Computing Base to Achieve
   Secure interfaces and Key Management with Multiple Verifiers
   attesting different device properties Source: [RFC9397] on TEEP
   Architecture

   Use case 3: Intra- and Inter-Domain Trusted Path Routing Need:
   Trustworthiness Assessment of routing nodes (Attesters) against
   multiple Verifiers (Control Plane Orchestrators) residing in
   different network administrative domain Solution: Verification of
   multiple attestation formats supporting reference integrity manifest
   with constrained disclosure Source: Trusted Path Routine [I-D.voit-
   rats-trustworthy-path-routing], network attestation for secure
   routing [I-D.liu-nasr-requirements]

   Use case 4: network endpoint assessment Need: provide resilience in
   the attestation service Source: use case from [RFC9334]

   Use case 5: Confidential Data Protection Need: avoid single Verifier
   corruption, which leads to the leakage of data privacy.  Source: use
   case from [RFC9334]

5.  Security Consideration

   [TBD]

6.  IANA Considerations

   [TBD]

7.  References

   ## Normative References [RFC9334] Birkholz, H., Thaler, D.,
   Richardson, M., Smith, N., and W.  Pan, "Remote ATtestation
   procedureS (RATS) Architecture", RFC 9334, DOI 10.17487/RFC9334,
   January 2023, https://www.rfc-editor.org/rfc/rfc9334
   (https://www.rfc-editor.org/rfc/rfc9334).

   [I-D.voit-rats-trustworthy-path-routing] Voit, E., Gaddam, C.  R.,
   Fedorkow, G., Birkholz, H., and M.  Chen, "Trusted Path Routing",
   Work in Progress, Internet-Draft, draft-voit-rats-trustworthy-path-
   routing- 09, 22 February 2024,
   <https://datatracker.ietf.org/doc/html/draft-voit- rats-trustworthy-
   path-routing-09>.

7.1.  Informative References

   [RFC9397] Pei, M., Tschofenig, H., Thaler, D., and D.  Wheeler,
   "Trusted Execution Environment Provisioning (TEEP) Architecture", RFC
   9397, DOI 10.17487/RFC9397, July 2023, https://www.rfc-
   editor.org/info/rfc9397 (https://www.rfc-editor.org/info/rfc9397).

   [I-D.liu-nasr-requirements] Liu, P.  C., "NASR Use Case and
   Requirements", Work in Progress, Internet-Draft, draft- liu-nasr-
   requirements-01, 8 February 2024,
   <https://datatracker.ietf.org/doc/html/draft- liu-nasr-requirements-
   01>.

   [TAP] Trusted Computing Group, "TCG Trusted Attestation Protocol
   (TAP) Use Cases for TPM Families 1.2 and 2.0 and DICE", Nov. 2019,
   <https://trustedcomputinggroup.org/wp-content/uploads/
   TCG_TNC_TAP_Use_Cases_v1r0p35_published.pdf)>.

8.  Three

   RFC 3161 [RFC3161] provides a method to timestamp a message digest to
   prove that it was created before a given time.

   This document defines two new CBOR Object Signing and Encryption
   (COSE) [STD96] header parameters that carry the TimestampToken (TST)
   output of RFC 3161, thus allowing existing and widely deployed trust
   infrastructure to be used with COSE structures used for signing
   (COSE_Sign and COSE_Sign1).

8.1.   Use Cases

   This section discusses two use cases, each representing one of the
   two modes of use defined in Section 9.

   A first use case is a digital document signed alongside a trustworthy
   timestamp.  This is a common case in legal contracts.  In such
   scenario, the document signer wants to reinforce the claim that the
   document existed on a specific date.  To achieve this, the document
   signer acquires a fresh TST for the document from a TSA, combines it
   with the document, and then signs the bundle.  Later on, a relying
   party consuming the signed bundle can be certain that the document
   existed _at least_ at the time specified by the TSA.  The relying
   party does not have to trust the signer's clock, which may have been
   maliciously altered or simply inaccurate.

   This usage scenario motivates the "Timestamp then COSE" mode defined
   in Section 9.1.

   A second use case is the notarization of a signed document by
   registering it at a Transparency Service.  This is common for
   accountability and auditability of issued documents.  Once a document
   is registered at a Transparency Service's append-only log, its log
   entry cannot be changed.  In certain cases, the registration policy
   of a Transparency Service may add a trustworthy timestamp to the
   signed document.  This is done to lock the signature to a specific
   point in time.  To achieve this, the Transparency Service acquires a
   TST from a TSA, bundles it alongside the signed document, and then
   registers it.  A relying party that wants to ascertain the
   authenticity of the document after the signing key has been
   compromised, can do so by making sure that no revocation information
   has been made public before the time asserted in the TST.

   This usage scenario motivates the "COSE then Timestamp" mode
   described in Section 9.2.

8.2.  Requirements Notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

9.  Modes of Use

   There are two different modes of composing COSE protection and
   timestamping, motivated by the usage scenarios discussed above.

   The diagrams in this section illustrate the processing flow of the
   specified modes.  For simplicity, only the COSE_Sign1 processing is
   shown.  Similar diagrams for COSE_Sign can be derived by allowing
   multiple private-key boxes and replacing the label [signature] with
   [signatures].

9.1.  Timestamp then COSE (TTC)

   shows the case where a datum is first digested and submitted to a TSA
   to be timestamped.

   This mode is utilized when the signature should also be performed
   over the timestamp to provide an immutable timestamp.

   A signed COSE message is then built as follows:

   *  The obtained timestamp token is added to the protected headers,

   *  The original datum becomes the payload of the signed COSE message.

   The message imprint sent to the TSA (Section 2.4 of [RFC3161]) MUST
   be the hash of the payload field of the COSE signed object.

9.2.  COSE then Timestamp (CTT)

   shows the case where the signature(s) field of the signed COSE object
   is digested and submitted to a TSA to be timestamped.  The obtained
   timestamp token is then added back as an unprotected header into the
   same COSE object.

   This mode is utilized when a record of the timing of the signature
   operation is desired.

   In this context, timestamp tokens are similar to a countersignature
   made by the TSA.

10.  RFC 3161 Time-Stamp Tokens COSE Header Parameters

   The two modes described in Section 9.1 and Section 9.2 use different
   inputs into the timestamping machinery, and consequently create
   different kinds of binding between COSE and TST.  To clearly separate
   their semantics two different COSE header parameters are defined as
   described in the following subsections.

10.1.  3161-ttc

   The 3161-ttc COSE _protected_ header parameter MUST be used for the
   mode described in Section 9.1.

   The 3161-ttc protected header parameter contains a DER-encoded
   RFC3161 TimeStampToken wrapped in a CBOR byte string (Major type 2).

   To minimize dependencies, the hash algorithm used for signing the
   COSE message SHOULD be the same as the algorithm used in the RFC3161
   MessageImprint.

10.2.  3161-ctt

   The 3161-ctt COSE _unprotected_ header parameter MUST be used for the
   mode described in Section 9.2.

   The message imprint sent in the request to the TSA MUST be either:

   *  the hash of the signature field of the COSE_Sign1 message.

   *  the hash of the signatures field of the COSE_Sign message.

   In either case, to minimize dependencies, the hash algorithm SHOULD
   be the same as the algorithm used for signing the COSE message.  This
   may not be possible if the timestamp token has been obtained outside
   the processing context in which the COSE object is assembled.

   The 3161-ctt unprotected header parameter contains a DER-encoded
   RFC3161 TimeStampToken wrapped in a CBOR byte string (Major type 2).

11.  Timestamp Processing

   RFC 3161 timestamp tokens use CMS as signature envelope format.
   [STD70] provides the details about signature verification, and
   [RFC3161] provides the details specific to timestamp token
   validation.  The payload of the signed timestamp token is the TSTInfo
   structure defined in [RFC3161], which contains the message imprint
   that was sent to the TSA.  The hash algorithm is contained in the
   message imprint structure, together with the hash itself.

   As part of the signature verification, the receiver MUST make sure
   that the message imprint in the embedded timestamp token matches a
   hash of either the payload, signature, or signature fields, depending
   on the mode of use and type of COSE structure.

   Appendix B of [RFC3161] provides an example that illustrates how
   timestamp tokens can be used to verify signatures of a timestamped
   message when utilizing X.509 certificates.

12.  Security Considerations

   Please review the Security Considerations section in [RFC3161]; these
   considerations apply to this document as well.

   Also review the Security Considerations section in [STD96]; these
   considerations apply to this document as well, especially the need
   for implementations to protect private key material.

   The following scenario assumes an attacker can manipulate the clocks
   on the COSE signer and its relying parties, but not the TSA.  It is
   also assumed that the TSA is a trusted third party, so the attacker
   cannot impersonate the TSA and create valid timestamp tokens.  In
   such a setting, any tampering with the COSE signer's clock does not
   have an impact because, once the timestamp is obtained from the TSA,
   it becomes the only reliable source of time.  However, in both CTT
   and TTC mode, a denial of service can occur if the attacker can
   adjust the relying party's clock so that the CMS validation fails.
   This could disrupt the timestamp validation.

   In CTT mode, an attacker could manipulate the unprotected header by
   removing or replacing the timestamp.  To avoid that, the signed COSE
   object should be integrity protected during transit and at rest.

   In TTC mode, the TSA is given an opaque identifier (a cryptographic
   hash value) for the payload.  While this means that the content of
   the payload is not directly revealed, to prevent comparison with
   known payloads or disclosure of identical payloads being used over
   time, the payload would need to be armored, e.g., with a nonce that
   is shared with the recipient of the header parameter but not the TSA.
   Such a mechanism can be employed inside the ones described in this
   specification, but is out of scope for this document.

13.  IANA Considerations

   IANA is requested to add the COSE header parameters defined in
   Table 1 to the "COSE Header Parameters" registry
   [IANA.cose_header-parameters].

   +==========+=======+=======+==========+=================+===========+
   | Name     | Label | Value | Value    | Description     | Reference |
   |          |       | Type  | Registry |                 |           |
   +==========+=======+=======+==========+=================+===========+
   | 3161-tcc | TBD1  | bstr  | -        | RFC 3161        | RFCthis,  |
   |          |       |       |          | timestamp       | Section   |
   |          |       |       |          | token           | 10.1      |
   +----------+-------+-------+----------+-----------------+-----------+
   | 3161-ctt | TBD2  | bstr  | -        | RFC 3161        | RFCthis,  |
   |          |       |       |          | timestamp       | Section   |
   |          |       |       |          | token           | 10.2      |
   +----------+-------+-------+----------+-----------------+-----------+

                    Table 1: New COSE Header Parameters

14.  References

14.1.  Normative References

   [IANA.cose_header-parameters]
              IANA, "COSE Header Parameters",
              <https://www.iana.org/assignments/cose>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC3161]  Adams, C., Cain, P., Pinkas, D., and R. Zuccherato,
              "Internet X.509 Public Key Infrastructure Time-Stamp
              Protocol (TSP)", RFC 3161, DOI 10.17487/RFC3161, August
              2001, <https://www.rfc-editor.org/rfc/rfc3161>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [STD70]    Housley, R., "Cryptographic Message Syntax (CMS)", STD 70,
              RFC 5652, DOI 10.17487/RFC5652, September 2009,
              <https://www.rfc-editor.org/rfc/rfc5652>.

   [STD96]    Schaad, J., "CBOR Object Signing and Encryption (COSE):
              Structures and Process", STD 96, RFC 9052,
              DOI 10.17487/RFC9052, August 2022,
              <https://www.rfc-editor.org/rfc/rfc9052>.

14.2.  Informative References

   [RFC9334]  Birkholz, H., Thaler, D., Richardson, M., Smith, N., and
              W. Pan, "Remote ATtestation procedureS (RATS)
              Architecture", RFC 9334, DOI 10.17487/RFC9334, January
              2023, <https://www.rfc-editor.org/rfc/rfc9334>.

Acknowledgments

   The editors would like to thank Carl Wallace, Leonard Rosenthol,
   Michael B.  Jones, Michael Prorock, Orie Steele, and Steve Lasker for
   their reviews and comments.

Authors' Addresses

   Jun Zhang
   Huawei Technologies France S.A.S.U.
   18, Quai du Point du Jour
   92100 Boulogne-Billancourt
   France
   Email: junzhang1@huawei.com


   Houda Labiod
   Huawei Technologies France S.A.S.U.
   18, Quai du Point du Jour
   92100 Boulogne-Billancourt
   France
   Email: houda.labiod@huawei.com


   Tieyan Li
   Shield Lab, Singapore Research Center, Huawei Technologies
   Science Park II., 20 Science Park Road,
   SINGAPORE Teletech Park
   Singapore
   Email: Li.Tieyan@huawei.com


   Thanassis Giannetsos
   UBITECH Ltd.
   Thessalias 8 and Etolias 10
   GR-15231 Chalandri,
   Greece


   Henk Birkholz
   Fraunhofer SIT
   Rheinstrasse 75
   64295 Darmstadt
   Germany
   Email: henk.birkholz@sit.fraunhofer.de
